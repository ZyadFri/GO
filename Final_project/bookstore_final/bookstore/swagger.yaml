
---

# swagger.yaml (Place in Project Root or /docs)

Below is an **OpenAPI 3.0** YAML spec describing your major endpoints. You can tweak it to match your exact endpoint paths, request bodies, etc.

```yaml
openapi: 3.0.3
info:
  title: Bookstore API
  version: "1.0.0"
  description: |
    A simple Bookstore API built in Go, with in-memory data stores and JSON file persistence.

servers:
  - url: http://localhost:8080
    description: Default local server

paths:
  /ping:
    get:
      summary: Health check
      responses:
        '200':
          description: Returns "pong"

  /api/authors:
    get:
      summary: List all authors
      operationId: listAuthors
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      summary: Create a new author
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '201':
          description: Author created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'

  /api/authors/{id}:
    get:
      summary: Get an author by ID
      operationId: getAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Found author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
    put:
      summary: Update an existing author
      operationId: updateAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: Updated author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          description: Author not found
    delete:
      summary: Delete an author by ID
      operationId: deleteAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Author deleted

  /api/books:
    get:
      summary: List or search books
      operationId: listBooks
      parameters:
        - name: title
          in: query
          schema:
            type: string
        - name: author
          in: query
          schema:
            type: string
        - name: genres
          in: query
          schema:
            type: array
            items:
              type: string
        - name: min_price
          in: query
          schema:
            type: number
        - name: max_price
          in: query
          schema:
            type: number
      responses:
        '200':
          description: A list of books (possibly filtered)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'

  /api/books/{id}:
    get:
      summary: Get a single book by ID
      operationId: getBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Found book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    put:
      summary: Update a book by ID
      operationId: updateBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Updated book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      summary: Delete a book by ID
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Book deleted

  /api/customers:
    get:
      summary: List all customers
      operationId: listCustomers
      responses:
        '200':
          description: Array of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      summary: Create a customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Created customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'

  /api/customers/{id}:
    get:
      summary: Get a single customer by ID
      operationId: getCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Found customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
    put:
      summary: Update a customer
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Updated customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
    delete:
      summary: Delete a customer
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Customer deleted

  /api/orders:
    get:
      summary: List all orders
      operationId: listOrders
      responses:
        '200':
          description: Array of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /api/orders/{id}:
    get:
      summary: Get a single order by ID
      operationId: getOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Found order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
    put:
      summary: Update an order
      operationId: updateOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    delete:
      summary: Delete an order
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Order deleted

  /api/reports/sales:
    get:
      summary: Get sales reports within a date range
      operationId: getSalesReports
      parameters:
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Returns sales reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  reports:
                    type: array
                    items:
                      $ref: '#/components/schemas/SalesReport'

components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        bio:
          type: string
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        genres:
          type: array
          items:
            type: string
        published_at:
          type: string
          format: date-time
        price:
          type: number
          format: float
        stock:
          type: integer
    Customer:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        created_at:
          type: string
          format: date-time
    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postal_code:
          type: string
        country:
          type: string
    OrderItem:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        quantity:
          type: integer
    Order:
      type: object
      properties:
        id:
          type: integer
        customer:
          $ref: '#/components/schemas/Customer'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total_price:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
        status:
          type: string
    BookSales:
      type: object
      properties:
        book:
          $ref: '#/components/schemas/Book'
        quantity_sold:
          type: integer
    SalesReport:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        total_revenue:
          type: number
          format: float
        total_orders:
          type: integer
        top_selling_books:
          type: array
          items:
            $ref: '#/components/schemas/BookSales'
